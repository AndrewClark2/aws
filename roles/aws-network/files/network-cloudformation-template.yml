Description:
  This template deploys a VPC, with public and private subnets spread
  across two Availability Zones. It deploys an Internet Gateway, with a default
  route on the public subnet. It deploys a pair of NAT Gateways (one in each AZ),
  and default routes for them in the private subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  RDSDBSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the DB subnet in the first Availability Zone
    Type: String
    Default: 10.192.50.0/24

  RDSDBSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the DB subnet in the second Availability Zone
    Type: String
    Default: 10.192.51.0/24


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC 

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "eu-central-1b"
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "eu-central-1c"
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "eu-central-1b"
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:  "eu-central-1c"
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

#   NatGateway1EIP:
#     Type: AWS::EC2::EIP
#     DependsOn: InternetGatewayAttachment
#     Properties:
#       Domain: vpc

#   # NatGateway2EIP:
#   #   Type: AWS::EC2::EIP
#   #   DependsOn: InternetGatewayAttachment
#   #   Properties:
#   #     Domain: vpc

#   NatGateway1:
#     Type: AWS::EC2::NatGateway
#     Properties:
#       AllocationId: !GetAtt NatGateway1EIP.AllocationId
#       SubnetId: !Ref PublicSubnet1
#       Tags:
#         - Key: Name
#           Value: !Sub ${EnvironmentName} NAT1

#   # NatGateway2:
#   #   Type: AWS::EC2::NatGateway
#   #   Properties:
#   #     AllocationId: !GetAtt NatGateway2EIP.AllocationId
#   #     SubnetId: !Ref PublicSubnet2

#   PublicRouteTable:
#     Type: AWS::EC2::RouteTable
#     Properties:
#       VpcId: !Ref VPC
#       Tags:
#         - Key: Name
#           Value: !Sub ${EnvironmentName} Public Routes (AZ1)

#   DefaultPublicRoute:
#     Type: AWS::EC2::Route
#     DependsOn: InternetGatewayAttachment
#     Properties:
#       RouteTableId: !Ref PublicRouteTable
#       DestinationCidrBlock: 0.0.0.0/0
#       GatewayId: !Ref InternetGateway

#   PublicSubnet1RouteTableAssociation:
#     Type: AWS::EC2::SubnetRouteTableAssociation
#     Properties:
#       RouteTableId: !Ref PublicRouteTable
#       SubnetId: !Ref PublicSubnet1

#   PublicSubnet2RouteTableAssociation:
#     Type: AWS::EC2::SubnetRouteTableAssociation
#     Properties:
#       RouteTableId: !Ref PublicRouteTable
#       SubnetId: !Ref PublicSubnet2

#   PrivateRouteTable1:
#     Type: AWS::EC2::RouteTable
#     Properties:
#       VpcId: !Ref VPC
#       Tags:
#         - Key: Name
#           Value: !Sub ${EnvironmentName} Private Routes (AZ1)

#   DefaultPrivateRoute1:
#     Type: AWS::EC2::Route
#     Properties:
#       RouteTableId: !Ref PrivateRouteTable1
#       DestinationCidrBlock: 0.0.0.0/0
#       NatGatewayId: !Ref NatGateway1

#   PrivateSubnet1RouteTableAssociation:
#     Type: AWS::EC2::SubnetRouteTableAssociation
#     Properties:
#       RouteTableId: !Ref PrivateRouteTable1
#       SubnetId: !Ref PrivateSubnet1

#   # PrivateRouteTable2:
#   #   Type: AWS::EC2::RouteTable
#   #   Properties:
#   #     VpcId: !Ref VPC
#   #     Tags:
#   #       - Key: Name
#   #         Value: !Sub ${EnvironmentName} Private Routes (AZ2)

#   # DefaultPrivateRoute2:
#   #   Type: AWS::EC2::Route
#   #   Properties:
#   #     RouteTableId: !Ref PrivateRouteTable2
#   #     DestinationCidrBlock: 0.0.0.0/0
#   #     NatGatewayId: !Ref NatGateway2

#   # PrivateSubnet2RouteTableAssociation:
#   #   Type: AWS::EC2::SubnetRouteTableAssociation
#   #   Properties:
#   #     RouteTableId: !Ref PrivateRouteTable2
#   #     SubnetId: !Ref PrivateSubnet2

#   RDSRouteTable:
#     Type: AWS::EC2::RouteTable
#     Properties:
#       VpcId: !Ref VPC
#       Tags:
#         - Key: Name
#           Value: !Sub ${EnvironmentName} RDS Routes 

#   RDSDBSubnet1RouteTableAssociation:
#     Type: AWS::EC2::SubnetRouteTableAssociation
#     Properties:
#       RouteTableId: !Ref RDSRouteTable
#       SubnetId: !Ref RDSDBSubnet1

#   RDSDBSubnet2RouteTableAssociation:
#     Type: AWS::EC2::SubnetRouteTableAssociation
#     Properties:
#       RouteTableId: !Ref RDSRouteTable
#       SubnetId: !Ref RDSDBSubnet2

#   DefaultRDSRoute:
#     Type: AWS::EC2::Route
#     DependsOn: InternetGatewayAttachment
#     Properties:
#       RouteTableId: !Ref RDSRouteTable
#       DestinationCidrBlock: 0.0.0.0/0
#       GatewayId: !Ref InternetGateway

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NoIngress SG 

  PublicServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "public-server-sg"
      GroupDescription: "General server security group with internet access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - Description: "HTTP Access from EVERYWHERE"
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - Description: "HTTPS Access from EVERYWHERE"
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public SG 

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "bastion-sg"
      GroupDescription: "Bastion security group with ssh access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - Description: "SSH Access from EVERYWHERE"
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion SG 

  PrivateServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "private-server-sg"
      GroupDescription: "General server security group without internet access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - Description: "SSH Access from bastion"
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private SG 

  PrivateServerSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: "Full access other servers in private SN"
      GroupId: !Ref PrivateServerSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref PrivateServerSecurityGroup

#   RDSDBServerSecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupName: "db-server-sg"
#       GroupDescription: "General RDS DB server security group"
#       VpcId: !Ref VPC
#       Tags:
#         - Key: Name
#           Value: !Sub ${EnvironmentName} RDS DB SG 

#   PublicServerSecurityGroupIngress1:
#     Type: AWS::EC2::SecurityGroupIngress
#     Properties: 
#       Description: "HTTPS access from Paranor VPN"
#       GroupId: !Ref PublicServerSecurityGroup
#       IpProtocol: tcp
#       FromPort: 443
#       ToPort: 443
#       CidrIp: !Ref ParanorNetworkCIDR

#   PublicServerSecurityGroupIngress2:
#     Type: AWS::EC2::SecurityGroupIngress
#     Properties: 
#       Description: "SSH access from Paranor VPN"
#       GroupId: !Ref PublicServerSecurityGroup
#       IpProtocol: tcp
#       FromPort: 22
#       ToPort: 22
#       CidrIp: !Ref ParanorNetworkCIDR

#   PublicServerSecurityGroupIngress3:
#     Type: AWS::EC2::SecurityGroupIngress
#     Properties: 
#       Description: "Full access from private SN"
#       GroupId: !Ref PublicServerSecurityGroup
#       IpProtocol: -1
#       SourceSecurityGroupId: !Ref PrivateServerSecurityGroup

#   PublicServerSecurityGroupIngress4:
#     Type: AWS::EC2::SecurityGroupIngress
#     Properties: 
#       Description: "Gerrit SSH access from Paranor VPN"
#       GroupId: !Ref PublicServerSecurityGroup
#       IpProtocol: tcp
#       FromPort: 29418
#       ToPort: 29418
#       CidrIp: !Ref ParanorNetworkCIDR

#   PrivateServerSecurityGroupIngress1:
#     Type: AWS::EC2::SecurityGroupIngress
#     Properties: 
#       Description: "SSH access from public SN"
#       GroupId: !Ref PrivateServerSecurityGroup
#       IpProtocol: tcp
#       FromPort: 22
#       ToPort: 22
#       SourceSecurityGroupId: !Ref PublicServerSecurityGroup

#   PrivateServerSecurityGroupIngress2:
#     Type: AWS::EC2::SecurityGroupIngress
#     Properties: 
#       Description: "HTTPS access from public SN"
#       GroupId: !Ref PrivateServerSecurityGroup
#       IpProtocol: tcp
#       FromPort: 443
#       ToPort: 443
#       SourceSecurityGroupId: !Ref PublicServerSecurityGroup

#   PrivateServerSecurityGroupIngress3:
#     Type: AWS::EC2::SecurityGroupIngress
#     Properties: 
#       Description: "Full access from private SN"
#       GroupId: !Ref PrivateServerSecurityGroup
#       IpProtocol: -1
#       SourceSecurityGroupId: !Ref PrivateServerSecurityGroup

#   PrivateServerSecurityGroupIngress4:
#     Type: AWS::EC2::SecurityGroupIngress
#     Properties: 
#       Description: "HTTP access on 8080 from public SN"
#       GroupId: !Ref PrivateServerSecurityGroup
#       IpProtocol: tcp
#       FromPort: 8080
#       ToPort: 8080
#       SourceSecurityGroupId: !Ref PublicServerSecurityGroup

#   RDSDBServerSecurityGroupIngress1:
#     Type: AWS::EC2::SecurityGroupIngress
#     Properties: 
#       Description: "Oracle access from Paranor VPN"
#       GroupId: !Ref RDSDBServerSecurityGroup
#       IpProtocol: tcp
#       FromPort: 1521
#       ToPort: 1521
#       CidrIp: !Ref ParanorNetworkCIDR

#   RDSDBServerSecurityGroupIngress2:
#     Type: AWS::EC2::SecurityGroupIngress
#     Properties: 
#       Description: "Oracle access from private SN"
#       GroupId: !Ref RDSDBServerSecurityGroup
#       IpProtocol: tcp
#       FromPort: 1521
#       ToPort: 1521
#       SourceSecurityGroupId: !Ref PrivateServerSecurityGroup

#   RDSDBServerSecurityGroupIngress3:
#     Type: AWS::EC2::SecurityGroupIngress
#     Properties: 
#       Description: "Oracle access from private SN"
#       GroupId: !Ref RDSDBServerSecurityGroup
#       IpProtocol: tcp
#       FromPort: 1521
#       ToPort: 1521
#       SourceSecurityGroupId: !Ref PublicServerSecurityGroup

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export :
      Name : 
        Fn::Sub: ${EnvironmentName}-VPC-ID

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export :
      Name : 
        Fn::Sub: ${EnvironmentName}-PublicSubnets

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export :
      Name : 
        Fn::Sub: ${EnvironmentName}-PrivateSubnets

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export :
      Name : 
        Fn::Sub: ${EnvironmentName}-PublicSubnet1-ID

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export :
      Name : 
        Fn::Sub: ${EnvironmentName}-PublicSubnet2-ID

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export :
      Name : 
        Fn::Sub: ${EnvironmentName}-PrivateSubnet1-ID

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export :
      Name : 
        Fn::Sub: ${EnvironmentName}-PrivateSubnet2-ID

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
    Export :
      Name : NoIngressSecurityGroup-ID

  PublicServerSecurityGroup:
    Description: Public security group 
    Value: !Ref PublicServerSecurityGroup
    Export :
      Name : 
        Fn::Sub: ${EnvironmentName}-PublicServerSecurityGroup-ID

  BastionSecurityGroup:
    Description: Bastion security group
    Value: !Ref BastionSecurityGroup
    Export :
      Name : 
        Fn::Sub: ${EnvironmentName}-BastionSecurityGroup-ID

  PrivateServerSecurityGroup:
    Description: Private security group
    Value: !Ref PrivateServerSecurityGroup
    Export :
      Name : 
        Fn::Sub: ${EnvironmentName}-PrivateServerSecurityGroup-ID
